diff --git a/src/Warnings.ts b/src/Warnings.ts
index e797c14..0014e02 100644
--- a/src/Warnings.ts
+++ b/src/Warnings.ts
@@ -1,4 +1,4 @@
-import type { Parser } from "./shell/Parser.js";
+import type { Parser } from "./shell/webParser.js";
 import type { GlobalConfig } from "./curl/opts.js";
 import type { Request } from "./Request.js";
 
diff --git a/src/generators/json.ts b/src/generators/json.ts
index 4a1a956..ce25d32 100644
--- a/src/generators/json.ts
+++ b/src/generators/json.ts
@@ -235,14 +235,14 @@ export function _toJsonString(
     ) + "\n"
   );
 }
-export function toJsonStringWarn(
+export async function toJsonStringWarn(
   curlCommand: string | string[],
   warnings: Warnings = [],
-): [string, Warnings] {
-  const requests = parse(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> {
+  const requests = await parse(curlCommand, supportedArgs, warnings);
   const json = _toJsonString(requests, warnings);
   return [json, warnings];
 }
-export function toJsonString(curlCommand: string | string[]): string {
-  return toJsonStringWarn(curlCommand)[0];
+export async function toJsonString(curlCommand: string | string[]): Promise<string> {
+  return (await toJsonStringWarn(curlCommand))[0];
 }
diff --git a/src/parse.ts b/src/parse.ts
index 0b2c81c..48167c4 100644
--- a/src/parse.ts
+++ b/src/parse.ts
@@ -23,12 +23,12 @@ export function clip(s: string, maxLength = 30): string {
   return s;
 }
 
-function findCommands(
+async function findCommands(
   curlCommand: string | string[],
   warnings: Warnings,
-): [Word[], Word?, Word?][] {
+): Promise<[Word[], Word?, Word?][]> {
   if (typeof curlCommand === "string") {
-    return tokenize(curlCommand, warnings);
+    return await tokenize(curlCommand, warnings);
   }
 
   if (curlCommand.length === 0) {
@@ -49,13 +49,13 @@ function findCommands(
  * @param command a string of Bash code containing at least one curl command or an
  * array of shell argument tokens (meant for passing process.argv).
  */
-export function parse(
+export async function parse(
   command: string | string[],
   supportedArgs?: Set<string>,
   warnings: Warnings = [],
-): Request[] {
+): Promise<Request[]> {
   let requests: Request[] = [];
-  const curlCommands = findCommands(command, warnings);
+  const curlCommands = await findCommands(command, warnings);
   for (const [argv, stdin, stdinFile] of curlCommands) {
     const [globalConfig] = curl.parseArgs(
       argv,
diff --git a/src/shell/Word.ts b/src/shell/Word.ts
index b130ac4..d766e5e 100644
--- a/src/shell/Word.ts
+++ b/src/shell/Word.ts
@@ -4,7 +4,7 @@
 // ["foobar", {type: "variable", value: "baz", text: "$baz"}, "qux"]
 // Except for the empty string [""], there should be no empty strings in the array.
 
-import type { Parser } from "./Parser.js";
+import type { Parser } from "./webParser.js";
 import { CCError } from "../utils.js";
 
 export interface ShellToken {
diff --git a/src/shell/tokenizer.ts b/src/shell/tokenizer.ts
index 5270218..7db0f08 100644
--- a/src/shell/tokenizer.ts
+++ b/src/shell/tokenizer.ts
@@ -3,8 +3,8 @@ import { Word, Token, firstShellToken } from "./Word.js";
 import { CCError } from "../utils.js";
 import { clip } from "../parse.js";
 
-import parser from "./Parser.js";
-import type { Parser } from "./Parser.js";
+import parserPromise from "./webParser.js";
+import type { Parser } from "./webParser.js";
 
 import { underlineNode, underlineCursor, type Warnings } from "../Warnings.js";
 
@@ -705,10 +705,11 @@ function nameToWord(
   return nameWord;
 }
 
-export function tokenize(
+export async function tokenize(
   curlCommand: string,
   warnings: Warnings = [],
-): [Word[], Word?, Word?][] {
+): Promise<[Word[], Word?, Word?][]> {
+  const parser = await parserPromise
   const ast = parser.parse(curlCommand);
   warnAboutBadNodes(ast, curlCommand, warnings);
 
diff --git a/src/shell/webParser.ts b/src/shell/webParser.ts
index 3222102..2509b47 100644
--- a/src/shell/webParser.ts
+++ b/src/shell/webParser.ts
@@ -1,18 +1,27 @@
 // This file replaces Parser.ts when curlconverter is running in the browser.
 
 import Parser from "web-tree-sitter";
+// @ts-ignore
+import wasmParser from "../../../../web-tree-sitter/tree-sitter.wasm?url";
+// @ts-ignore
+import wasmBash from "../../tree-sitter-bash.wasm?url";
 
-// NOTE: top-level await requires Safari 15+
-// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#browser_compatibility
-await Parser.init({
-  // eslint-disable-next-line @typescript-eslint/no-unused-vars
-  locateFile(scriptName: string, scriptDirectory: string) {
-    return "/" + scriptName;
-  },
-});
-const Bash = await Parser.Language.load("/tree-sitter-bash.wasm");
-const parser = new Parser();
-parser.setLanguage(Bash);
+export default new Promise<Parser>(async (resolve, reject) => {
+  Parser.init({
+    locateFile: () => {
+      if (typeof wasmParser === 'string') {
+        return wasmParser;
+      }
+
+      return URL.createObjectURL(new Blob([wasmParser]));
+    }
+  }).then(() => {
+    return Parser.Language.load(wasmBash);
+  }).then(bash => {
+    const parser = new Parser();
+    parser.setLanguage(bash);
 
-export default parser;
+    resolve(parser);
+  }).catch(reject);
+});
 export type { Parser };
