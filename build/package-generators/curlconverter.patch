diff --git a/src/bash-parser-web.ts b/src/bash-parser-web.ts
index 2cc594f..b97e4df 100644
--- a/src/bash-parser-web.ts
+++ b/src/bash-parser-web.ts
@@ -1,11 +1,29 @@
+/* eslint-disable @typescript-eslint/ban-ts-comment */
+
 import Parser from "web-tree-sitter";
+// @ts-ignore
+import wasmParser from "../../../web-tree-sitter/tree-sitter.wasm?url";
+// @ts-ignore
+import wasmBash from "../tree-sitter-bash.wasm?url";
+
+export default new Promise<Parser>(async (resolve, reject) => {
+  try {
+    await Parser.init({
+      locateFile: () => {
+        if (typeof wasmParser === 'string') {
+          return wasmParser;
+        }
 
-// NOTE: Top-level await is not available in Safari until Safari 15
-// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#browser_compatibility
-await Parser.init();
-const Bash = await Parser.Language.load("/tree-sitter-bash.wasm");
-const parser = new Parser();
-parser.setLanguage(Bash);
+        return URL.createObjectURL(new Blob([wasmParser]));
+      }
+    });
+    const Bash = await Parser.Language.load(wasmBash);
+    const parser = new Parser();
+    parser.setLanguage(Bash);
 
-export default parser;
+    resolve(parser);
+  } catch (err) {
+    reject(err);
+  }
+});
 export type { Parser };
diff --git a/src/generators/ansible.ts b/src/generators/ansible.ts
index da411c7..240e2c4 100644
--- a/src/generators/ansible.ts
+++ b/src/generators/ansible.ts
@@ -115,14 +115,14 @@ export const _toAnsible = (
     2
   );
 };
-export const toAnsibleWarn = (
+export const toAnsibleWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const ansible = _toAnsible(request, warnings);
   return [ansible, warnings];
 };
-export const toAnsible = (curlCommand: string | string[]): string => {
-  return toAnsibleWarn(curlCommand)[0];
+export const toAnsible = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toAnsibleWarn(curlCommand))[0];
 };
diff --git a/src/generators/cfml.ts b/src/generators/cfml.ts
index 26b5d4d..6315ccf 100644
--- a/src/generators/cfml.ts
+++ b/src/generators/cfml.ts
@@ -150,15 +150,15 @@ export const _toCFML = (request: Request, warnings: Warnings = []): string => {
   return cfmlCode;
 };
 
-export const toCFMLWarn = (
+export const toCFMLWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const cfml = _toCFML(request, warnings);
   return [cfml, warnings];
 };
 
-export const toCFML = (curlCommand: string | string[]): string => {
-  return toCFMLWarn(curlCommand)[0];
+export const toCFML = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toCFMLWarn(curlCommand))[0];
 };
diff --git a/src/generators/csharp.ts b/src/generators/csharp.ts
index 83628a2..e359dde 100644
--- a/src/generators/csharp.ts
+++ b/src/generators/csharp.ts
@@ -314,14 +314,14 @@ export const _toCSharp = (
   }
   return s;
 };
-export const toCSharpWarn = (
+export const toCSharpWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const cSharp = _toCSharp(request, warnings);
   return [cSharp, warnings];
 };
-export const toCSharp = (curlCommand: string | string[]): string => {
-  return toCSharpWarn(curlCommand)[0];
+export const toCSharp = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toCSharpWarn(curlCommand))[0];
 };
diff --git a/src/generators/dart.ts b/src/generators/dart.ts
index 1a4ad05..f39a6c0 100644
--- a/src/generators/dart.ts
+++ b/src/generators/dart.ts
@@ -218,14 +218,14 @@ export const _toDart = (request: Request, warnings: Warnings = []): string => {
   importString += "import 'package:http/http.dart' as http;\n";
   return importString + "\n" + s + "\n";
 };
-export const toDartWarn = (
+export const toDartWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const dart = _toDart(request, warnings);
   return [dart, warnings];
 };
-export const toDart = (curlCommand: string | string[]): string => {
-  return toDartWarn(curlCommand)[0];
+export const toDart = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toDartWarn(curlCommand))[0];
 };
diff --git a/src/generators/elixir.ts b/src/generators/elixir.ts
index 0dc25dd..415a7a0 100644
--- a/src/generators/elixir.ts
+++ b/src/generators/elixir.ts
@@ -297,15 +297,15 @@ response = HTTPoison.request(request)
 `;
 };
 
-export const toElixirWarn = (
+export const toElixirWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const elixir = _toElixir(request, warnings);
   return [elixir, warnings];
 };
 
-export const toElixir = (curlCommand: string | string[]): string => {
-  return toElixirWarn(curlCommand)[0];
+export const toElixir = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toElixirWarn(curlCommand))[0];
 };
diff --git a/src/generators/go.ts b/src/generators/go.ts
index 81499c5..475f88a 100644
--- a/src/generators/go.ts
+++ b/src/generators/go.ts
@@ -134,14 +134,14 @@ export const _toGo = (request: Request, warnings: Warnings = []): string => {
 
   return goCode + "\n";
 };
-export const toGoWarn = (
+export const toGoWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const go = _toGo(request, warnings);
   return [go, warnings];
 };
-export const toGo = (curlCommand: string | string[]): string => {
-  return toGoWarn(curlCommand)[0];
+export const toGo = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toGoWarn(curlCommand))[0];
 };
diff --git a/src/generators/java.ts b/src/generators/java.ts
index a421751..a15113a 100644
--- a/src/generators/java.ts
+++ b/src/generators/java.ts
@@ -159,15 +159,15 @@ export const _toJava = (request: Request, warnings: Warnings = []): string => {
 
   return javaCode + "\n";
 };
-export const toJavaWarn = (
+export const toJavaWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const java = _toJava(request, warnings);
   return [java, warnings];
 };
 
-export const toJava = (curlCommand: string | string[]): string => {
-  return toJavaWarn(curlCommand)[0];
+export const toJava = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toJavaWarn(curlCommand))[0];
 };
diff --git a/src/generators/javascript/axios.ts b/src/generators/javascript/axios.ts
index fce11dc..83c45a5 100644
--- a/src/generators/javascript/axios.ts
+++ b/src/generators/javascript/axios.ts
@@ -368,14 +368,14 @@ export const _toNodeAxios = (
 
   return importCode + "\n" + code;
 };
-export const toNodeAxiosWarn = (
+export const toNodeAxiosWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const nodeAxios = _toNodeAxios(request, warnings);
   return [nodeAxios, warnings];
 };
-export const toNodeAxios = (curlCommand: string | string[]): string => {
-  return toNodeAxiosWarn(curlCommand)[0];
+export const toNodeAxios = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toNodeAxiosWarn(curlCommand))[0];
 };
diff --git a/src/generators/javascript/javascript.ts b/src/generators/javascript/javascript.ts
index c4597a8..751afc9 100644
--- a/src/generators/javascript/javascript.ts
+++ b/src/generators/javascript/javascript.ts
@@ -386,32 +386,32 @@ export const _toNode = (request: Request, warnings: Warnings = []): string => {
   return _toJavaScriptOrNode(request, warnings, true);
 };
 
-export const toJavaScriptWarn = (
+export const toJavaScriptWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(
     curlCommand,
     javaScriptSupportedArgs,
     warnings
   );
   return [_toJavaScript(request, warnings), warnings];
 };
-export const toJavaScript = (curlCommand: string | string[]): string => {
-  return toJavaScriptWarn(curlCommand)[0];
+export const toJavaScript = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toJavaScriptWarn(curlCommand))[0];
 };
 
-export const toNodeWarn = (
+export const toNodeWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(
     curlCommand,
     nodeSupportedArgs,
     warnings
   );
   return [_toNode(request, warnings), warnings];
 };
-export const toNode = (curlCommand: string | string[]): string => {
-  return toNodeWarn(curlCommand)[0];
+export const toNode = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toNodeWarn(curlCommand))[0];
 };
diff --git a/src/generators/javascript/node-request.ts b/src/generators/javascript/node-request.ts
index d3f1e96..abb7c1d 100644
--- a/src/generators/javascript/node-request.ts
+++ b/src/generators/javascript/node-request.ts
@@ -100,16 +100,16 @@ export const _toNodeRequest = (
 
   return nodeRequestCode + "\n";
 };
-export const toNodeRequestWarn = (
+export const toNodeRequestWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   warnings.unshift(["node-request", "the request package is deprecated"]);
 
   const nodeRequests = _toNodeRequest(request, warnings);
   return [nodeRequests, warnings];
 };
-export const toNodeRequest = (curlCommand: string | string[]): string => {
-  return toNodeRequestWarn(curlCommand)[0];
+export const toNodeRequest = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toNodeRequestWarn(curlCommand))[0];
 };
diff --git a/src/generators/json.ts b/src/generators/json.ts
index f0dfa36..7a771ce 100644
--- a/src/generators/json.ts
+++ b/src/generators/json.ts
@@ -178,14 +178,14 @@ export const _toJsonString = (
     ) + "\n"
   );
 };
-export const toJsonStringWarn = (
+export const toJsonStringWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const json = _toJsonString(request, warnings);
   return [json, warnings];
 };
-export const toJsonString = (curlCommand: string | string[]): string => {
-  return toJsonStringWarn(curlCommand)[0];
+export const toJsonString = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toJsonStringWarn(curlCommand))[0];
 };
diff --git a/src/generators/matlab/matlab.ts b/src/generators/matlab/matlab.ts
index 7c55fb9..7d3d81b 100644
--- a/src/generators/matlab/matlab.ts
+++ b/src/generators/matlab/matlab.ts
@@ -45,14 +45,14 @@ export const _toMATLAB = (
     .filter((line) => line !== null)
     .join("\n");
 };
-export const toMATLABWarn = (
+export const toMATLABWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const matlab = _toMATLAB(request, warnings);
   return [matlab, warnings];
 };
-export const toMATLAB = (curlCommand: string | string[]): string => {
-  return toMATLABWarn(curlCommand)[0];
+export const toMATLAB = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toMATLABWarn(curlCommand))[0];
 };
diff --git a/src/generators/php/php-requests.ts b/src/generators/php/php-requests.ts
index 393c506..7c4247e 100644
--- a/src/generators/php/php-requests.ts
+++ b/src/generators/php/php-requests.ts
@@ -112,14 +112,14 @@ export const _toPhpRequests = (
 
   return phpCode + "\n";
 };
-export const toPhpRequestsWarn = (
+export const toPhpRequestsWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const php = _toPhpRequests(request, warnings);
   return [php, warnings];
 };
-export const toPhpRequests = (curlCommand: string | string[]): string => {
-  return toPhpRequestsWarn(curlCommand)[0];
+export const toPhpRequests = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toPhpRequestsWarn(curlCommand))[0];
 };
diff --git a/src/generators/php/php.ts b/src/generators/php/php.ts
index 36dc1a9..8fe467f 100644
--- a/src/generators/php/php.ts
+++ b/src/generators/php/php.ts
@@ -213,14 +213,14 @@ export const _toPhp = (request: Request, warnings: Warnings = []): string => {
   return phpCode;
 };
 
-export const toPhpWarn = (
+export const toPhpWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const php = _toPhp(request, warnings);
   return [php, warnings];
 };
-export const toPhp = (curlCommand: string | string[]): string => {
-  return toPhpWarn(curlCommand)[0];
+export const toPhp = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toPhpWarn(curlCommand))[0];
 };
diff --git a/src/generators/python.ts b/src/generators/python.ts
index d3882b9..cae86ff 100644
--- a/src/generators/python.ts
+++ b/src/generators/python.ts
@@ -1877,15 +1877,15 @@ export const _toPython = (
   return pythonCode;
 };
 
-export const toPythonWarn = (
+export const toPythonWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const python = _toPython(request, warnings);
   return [python, warnings];
 };
 
-export const toPython = (curlCommand: string | string[]): string => {
-  return toPythonWarn(curlCommand)[0];
+export const toPython = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toPythonWarn(curlCommand))[0];
 };
diff --git a/src/generators/r.ts b/src/generators/r.ts
index baf54d0..b75ba09 100644
--- a/src/generators/r.ts
+++ b/src/generators/r.ts
@@ -221,14 +221,14 @@ export const _toR = (request: Request, warnings: Warnings = []): string => {
 
   return rstatsCode + "\n";
 };
-export const toRWarn = (
+export const toRWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const r = _toR(request, warnings);
   return [r, warnings];
 };
-export const toR = (curlCommand: string | string[]): string => {
-  return toRWarn(curlCommand)[0];
+export const toR = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toRWarn(curlCommand))[0];
 };
diff --git a/src/generators/ruby.ts b/src/generators/ruby.ts
index 5bb0858..186d33e 100644
--- a/src/generators/ruby.ts
+++ b/src/generators/ruby.ts
@@ -429,15 +429,15 @@ export const _toRuby = (request: Request, warnings: Warnings = []): string => {
   return prelude + "\n" + code + "\n";
 };
 
-export const toRubyWarn = (
+export const toRubyWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const ruby = _toRuby(request, warnings);
   return [ruby, warnings];
 };
 
-export const toRuby = (curlCommand: string | string[]): string => {
-  return toRubyWarn(curlCommand)[0];
+export const toRuby = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toRubyWarn(curlCommand))[0];
 };
diff --git a/src/generators/rust.ts b/src/generators/rust.ts
index 78edd02..398e95f 100644
--- a/src/generators/rust.ts
+++ b/src/generators/rust.ts
@@ -173,14 +173,14 @@ export const _toRust = (request: Request, warnings: Warnings = []): string => {
 
   return lines.join("\n") + "\n";
 };
-export const toRustWarn = (
+export const toRustWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const rust = _toRust(request, warnings);
   return [rust, warnings];
 };
-export const toRust = (curlCommand: string | string[]): string => {
-  return toRustWarn(curlCommand)[0];
+export const toRust = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toRustWarn(curlCommand))[0];
 };
diff --git a/src/util.ts b/src/util.ts
index c7d0d22..44f3eb1 100644
--- a/src/util.ts
+++ b/src/util.ts
@@ -1,7 +1,7 @@
 import URL from "url";
 
-import parser from "./bash-parser.js";
-import type { Parser } from "./bash-parser.js";
+import parserPromise from "./bash-parser-web.js";
+import type { Parser } from "./bash-parser-web.js";
 
 // TODO: this type doesn't work.
 function has<T, K extends PropertyKey>(
@@ -1130,10 +1130,11 @@ interface TokenizeResult {
   stdin?: string;
   stdinFile?: string;
 }
-const tokenize = (
+const tokenize = async (
   curlCommand: string,
   warnings: Warnings = []
-): TokenizeResult => {
+): Promise<TokenizeResult> => {
+  const parser = await parserPromise;
   const ast = parser.parse(curlCommand);
   // https://github.com/tree-sitter/tree-sitter-bash/blob/master/grammar.js
   // The AST must be in a nice format, i.e.
@@ -2100,11 +2101,11 @@ function buildRequest(
   return request;
 }
 
-function parseCurlCommand(
+async function parseCurlCommand(
   curlCommand: string | string[],
   supportedArgs?: Set<string>,
   warnings: Warnings = []
-): Request {
+): Promise<Request> {
   let cmdName: string,
     args: string[],
     stdin: undefined | string,
@@ -2115,7 +2116,7 @@ function parseCurlCommand(
       throw new CCError("no arguments provided");
     }
   } else {
-    ({ cmdName, args, stdin, stdinFile } = tokenize(curlCommand, warnings));
+    ({ cmdName, args, stdin, stdinFile } = await tokenize(curlCommand, warnings));
     if (typeof cmdName === "undefined") {
       throw new CCError("failed to parse input");
     }
