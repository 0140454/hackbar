diff -Naur a/src/bash-parser-web.ts b/src/bash-parser-web.ts
--- a/src/bash-parser-web.ts	2022-07-11 20:18:07.194735001 +0800
+++ b/src/bash-parser-web.ts	2022-07-20 02:41:55.792403919 +0800
@@ -1,11 +1,29 @@
+/* eslint-disable @typescript-eslint/ban-ts-comment */
+
 import Parser from "web-tree-sitter";
+// @ts-ignore
+import wasmParser from "../../../web-tree-sitter/tree-sitter.wasm?url";
+// @ts-ignore
+import wasmBash from "../tree-sitter-bash.wasm?url";
+
+export default new Promise<Parser>(async (resolve, reject) => {
+  try {
+    await Parser.init({
+      locateFile: () => {
+        if (typeof wasmParser === 'string') {
+          return wasmParser;
+        }

-// NOTE: Top-level await is not available in Safari until Safari 15
-// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#browser_compatibility
-await Parser.init();
-const Bash = await Parser.Language.load("tree-sitter-bash.wasm");
-const parser = new Parser();
-parser.setLanguage(Bash);
+        return URL.createObjectURL(new Blob([wasmParser]));
+      }
+    });
+    const Bash = await Parser.Language.load(wasmBash);
+    const parser = new Parser();
+    parser.setLanguage(Bash);

-export default parser;
+    resolve(parser);
+  } catch (err) {
+    reject(err);
+  }
+});
 export type { Parser };
diff -Naur a/src/generators/ansible.ts b/src/generators/ansible.ts
--- a/src/generators/ansible.ts	2022-07-11 20:18:07.184735098 +0800
+++ b/src/generators/ansible.ts	2022-07-11 21:59:47.005079909 +0800
@@ -60,14 +60,14 @@
   });
   return result;
 };
-export const toAnsibleWarn = (
+export const toAnsibleWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const ansible = _toAnsible(request, warnings);
   return [ansible, warnings];
 };
-export const toAnsible = (curlCommand: string | string[]): string => {
-  return toAnsibleWarn(curlCommand)[0];
+export const toAnsible = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toAnsibleWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/cfml.ts b/src/generators/cfml.ts
--- a/src/generators/cfml.ts	2022-07-11 20:18:07.186735078 +0800
+++ b/src/generators/cfml.ts	2022-07-11 21:59:47.006079930 +0800
@@ -136,15 +136,15 @@
   return cfmlCode;
 };

-export const toCFMLWarn = (
+export const toCFMLWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const cfml = _toCFML(request, warnings);
   return [cfml, warnings];
 };

-export const toCFML = (curlCommand: string | string[]): string => {
-  return toCFMLWarn(curlCommand)[0];
+export const toCFML = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toCFMLWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/dart.ts b/src/generators/dart.ts
--- a/src/generators/dart.ts	2022-07-11 20:18:07.189735049 +0800
+++ b/src/generators/dart.ts	2022-07-11 21:59:47.020080222 +0800
@@ -142,14 +142,14 @@

   return s + "\n";
 };
-export const toDartWarn = (
+export const toDartWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const dart = _toDart(request, warnings);
   return [dart, warnings];
 };
-export const toDart = (curlCommand: string | string[]): string => {
-  return toDartWarn(curlCommand)[0];
+export const toDart = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toDartWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/elixir.ts b/src/generators/elixir.ts
--- a/src/generators/elixir.ts	2022-07-11 20:18:07.189735049 +0800
+++ b/src/generators/elixir.ts	2022-07-11 21:59:47.040080638 +0800
@@ -249,15 +249,15 @@

   return template;
 };
-export const toElixirWarn = (
+export const toElixirWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const elixir = _toElixir(request, warnings);
   return [elixir, warnings];
 };

-export const toElixir = (curlCommand: string | string[]): string => {
-  return toElixirWarn(curlCommand)[0];
+export const toElixir = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toElixirWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/go.ts b/src/generators/go.ts
--- a/src/generators/go.ts	2022-07-11 20:18:07.189735049 +0800
+++ b/src/generators/go.ts	2022-07-11 21:59:47.042080680 +0800
@@ -93,14 +93,14 @@

   return goCode + "\n";
 };
-export const toGoWarn = (
+export const toGoWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const go = _toGo(request, warnings);
   return [go, warnings];
 };
-export const toGo = (curlCommand: string | string[]): string => {
-  return toGoWarn(curlCommand)[0];
+export const toGo = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toGoWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/javascript/axios.ts b/src/generators/javascript/axios.ts
--- a/src/generators/javascript/axios.ts	2022-07-11 20:18:07.185735088 +0800
+++ b/src/generators/javascript/axios.ts	2022-07-11 21:59:47.161083156 +0800
@@ -377,14 +377,14 @@

   return importCode + "\n" + code;
 };
-export const toNodeAxiosWarn = (
+export const toNodeAxiosWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const nodeAxios = _toNodeAxios(request, warnings);
   return [nodeAxios, warnings];
 };
-export const toNodeAxios = (curlCommand: string | string[]): string => {
-  return toNodeAxiosWarn(curlCommand)[0];
+export const toNodeAxios = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toNodeAxiosWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/javascript/javascript.ts b/src/generators/javascript/javascript.ts
--- a/src/generators/javascript/javascript.ts	2022-07-11 20:18:07.185735088 +0800
+++ b/src/generators/javascript/javascript.ts	2022-07-11 21:59:47.161083156 +0800
@@ -320,32 +320,32 @@
   return _toJavaScriptOrNode(request, warnings, true);
 };

-export const toJavaScriptWarn = (
+export const toJavaScriptWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(
     curlCommand,
     javaScriptSupportedArgs,
     warnings
   );
   return [_toJavaScript(request, warnings), warnings];
 };
-export const toJavaScript = (curlCommand: string | string[]): string => {
-  return toJavaScriptWarn(curlCommand)[0];
+export const toJavaScript = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toJavaScriptWarn(curlCommand))[0];
 };

-export const toNodeWarn = (
+export const toNodeWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(
     curlCommand,
     nodeSupportedArgs,
     warnings
   );
   return [_toNode(request, warnings), warnings];
 };
-export const toNode = (curlCommand: string | string[]): string => {
-  return toNodeWarn(curlCommand)[0];
+export const toNode = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toNodeWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/javascript/node-request.ts b/src/generators/javascript/node-request.ts
--- a/src/generators/javascript/node-request.ts	2022-07-11 20:18:07.186735078 +0800
+++ b/src/generators/javascript/node-request.ts	2022-07-11 21:59:47.165083239 +0800
@@ -99,16 +99,16 @@

   return nodeRequestCode + "\n";
 };
-export const toNodeRequestWarn = (
+export const toNodeRequestWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   warnings.unshift(["node-request", "the request package is deprecated"]);

   const nodeRequests = _toNodeRequest(request, warnings);
   return [nodeRequests, warnings];
 };
-export const toNodeRequest = (curlCommand: string | string[]): string => {
-  return toNodeRequestWarn(curlCommand)[0];
+export const toNodeRequest = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toNodeRequestWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/java.ts b/src/generators/java.ts
--- a/src/generators/java.ts	2022-07-11 20:18:07.190735040 +0800
+++ b/src/generators/java.ts	2022-07-11 21:59:47.047080783 +0800
@@ -114,15 +114,15 @@

   return javaCode + "\n";
 };
-export const toJavaWarn = (
+export const toJavaWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const java = _toJava(request, warnings);
   return [java, warnings];
 };

-export const toJava = (curlCommand: string | string[]): string => {
-  return toJavaWarn(curlCommand)[0];
+export const toJava = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toJavaWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/json.ts b/src/generators/json.ts
--- a/src/generators/json.ts	2022-07-11 20:18:07.190735040 +0800
+++ b/src/generators/json.ts	2022-07-11 21:59:47.061081075 +0800
@@ -183,14 +183,14 @@
     ) + "\n"
   );
 };
-export const toJsonStringWarn = (
+export const toJsonStringWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const json = _toJsonString(request, warnings);
   return [json, warnings];
 };
-export const toJsonString = (curlCommand: string | string[]): string => {
-  return toJsonStringWarn(curlCommand)[0];
+export const toJsonString = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toJsonStringWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/matlab/matlab.ts b/src/generators/matlab/matlab.ts
--- a/src/generators/matlab/matlab.ts	2022-07-11 20:18:07.188735059 +0800
+++ b/src/generators/matlab/matlab.ts	2022-07-11 21:59:47.176083468 +0800
@@ -40,14 +40,14 @@
     .filter((line) => line !== null)
     .join("\n");
 };
-export const toMATLABWarn = (
+export const toMATLABWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const matlab = _toMATLAB(request, warnings);
   return [matlab, warnings];
 };
-export const toMATLAB = (curlCommand: string | string[]): string => {
-  return toMATLABWarn(curlCommand)[0];
+export const toMATLAB = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toMATLABWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/php/php-requests.ts b/src/generators/php/php-requests.ts
--- a/src/generators/php/php-requests.ts	2022-07-11 20:18:07.191735030 +0800
+++ b/src/generators/php/php-requests.ts	2022-07-11 21:59:47.181083572 +0800
@@ -114,14 +114,14 @@

   return phpCode + "\n";
 };
-export const toPhpRequestsWarn = (
+export const toPhpRequestsWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const php = _toPhpRequests(request, warnings);
   return [php, warnings];
 };
-export const toPhpRequests = (curlCommand: string | string[]): string => {
-  return toPhpRequestsWarn(curlCommand)[0];
+export const toPhpRequests = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toPhpRequestsWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/php/php.ts b/src/generators/php/php.ts
--- a/src/generators/php/php.ts	2022-07-11 20:18:07.191735030 +0800
+++ b/src/generators/php/php.ts	2022-07-11 21:59:47.198083926 +0800
@@ -156,14 +156,14 @@
   return phpCode;
 };

-export const toPhpWarn = (
+export const toPhpWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const php = _toPhp(request, warnings);
   return [php, warnings];
 };
-export const toPhp = (curlCommand: string | string[]): string => {
-  return toPhpWarn(curlCommand)[0];
+export const toPhp = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toPhpWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/python.ts b/src/generators/python.ts
--- a/src/generators/python.ts	2022-07-11 20:18:07.192735020 +0800
+++ b/src/generators/python.ts	2022-07-11 21:59:47.109082074 +0800
@@ -1026,15 +1026,15 @@
   return pythonCode + "\n";
 };

-export const toPythonWarn = (
+export const toPythonWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const python = _toPython(request, warnings);
   return [python, warnings];
 };

-export const toPython = (curlCommand: string | string[]): string => {
-  return toPythonWarn(curlCommand)[0];
+export const toPython = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toPythonWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/r.ts b/src/generators/r.ts
--- a/src/generators/r.ts	2022-07-11 20:18:07.192735020 +0800
+++ b/src/generators/r.ts	2022-07-11 21:59:47.129082490 +0800
@@ -221,14 +221,14 @@

   return rstatsCode + "\n";
 };
-export const toRWarn = (
+export const toRWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const r = _toR(request, warnings);
   return [r, warnings];
 };
-export const toR = (curlCommand: string | string[]): string => {
-  return toRWarn(curlCommand)[0];
+export const toR = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toRWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/rust.ts b/src/generators/rust.ts
--- a/src/generators/rust.ts	2022-07-11 20:18:07.193735011 +0800
+++ b/src/generators/rust.ts	2022-07-11 21:59:47.144082802 +0800
@@ -135,14 +135,14 @@

   return lines.join("\n") + "\n";
 };
-export const toRustWarn = (
+export const toRustWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const rust = _toRust(request, warnings);
   return [rust, warnings];
 };
-export const toRust = (curlCommand: string | string[]): string => {
-  return toRustWarn(curlCommand)[0];
+export const toRust = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toRustWarn(curlCommand))[0];
 };
diff -Naur a/src/generators/strest.ts b/src/generators/strest.ts
--- a/src/generators/strest.ts	2022-07-11 20:18:07.193735011 +0800
+++ b/src/generators/strest.ts	2022-07-11 21:59:47.161083156 +0800
@@ -140,14 +140,14 @@

   return yaml.stringify(response, 100, 2);
 };
-export const toStrestWarn = (
+export const toStrestWarn = async (
   curlCommand: string | string[],
   warnings: Warnings = []
-): [string, Warnings] => {
-  const request = util.parseCurlCommand(curlCommand, supportedArgs, warnings);
+): Promise<[string, Warnings]> => {
+  const request = await util.parseCurlCommand(curlCommand, supportedArgs, warnings);
   const strest = _toStrest(request, warnings);
   return [strest, warnings];
 };
-export const toStrest = (curlCommand: string | string[]): string => {
-  return toStrestWarn(curlCommand)[0];
+export const toStrest = async (curlCommand: string | string[]): Promise<string> => {
+  return (await toStrestWarn(curlCommand))[0];
 };
diff -Naur a/src/util.ts b/src/util.ts
--- a/src/util.ts	2022-07-11 20:18:07.197734972 +0800
+++ b/src/util.ts	2022-07-11 23:50:59.194544078 +0800
@@ -2,8 +2,8 @@

 import nunjucks from "nunjucks";

-import parser from "./bash-parser.js";
-import type { Parser } from "./bash-parser.js";
+import parserPromise from "./bash-parser-web.js";
+import type { Parser } from "./bash-parser-web.js";

 const env = nunjucks.configure(["templates/"], {
   // set folders with templates
@@ -987,10 +987,11 @@
   stdin?: string;
   input?: string;
 }
-const tokenize = (
+const tokenize = async (
   curlCommand: string,
   warnings: Warnings = []
-): TokenizeResult => {
+): Promise<TokenizeResult> => {
+  const parser = await parserPromise;
   const curlArgs = parser.parse(curlCommand);
   // The AST must be in a nice format, i.e.
   // (program
@@ -1734,11 +1735,11 @@
   return request;
 }

-function parseCurlCommand(
+async function parseCurlCommand(
   curlCommand: string | string[],
   supportedArgs?: Set<string>,
   warnings: Warnings = []
-): Request {
+): Promise<Request> {
   let cmdName: string,
     args: string[],
     stdin: undefined | string,
@@ -1749,7 +1750,7 @@
       throw new CCError("no arguments provided");
     }
   } else {
-    ({ cmdName, args, stdin, input } = tokenize(curlCommand, warnings));
+    ({ cmdName, args, stdin, input } = await tokenize(curlCommand, warnings));
     if (typeof cmdName === "undefined") {
       throw new CCError("failed to parse input");
     }
--- a/tsconfig.json	2022-07-11 20:18:07.181735127 +0800
+++ b/tsconfig.json	2022-07-20 02:42:35.717439733 +0800
@@ -6,7 +6,7 @@
     "sourceMap": true,
     "strict": true,
     "target": "es2018",
-    "lib": ["es2018"],
+    "lib": ["es2018", "dom"],
     "moduleResolution": "node",
     "module": "es2022",
     "esModuleInterop": true,
